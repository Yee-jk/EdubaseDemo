<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>